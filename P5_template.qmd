---
title: "Client Report - The War with Star Wars"
subtitle: "Course DS 250"
author: "Jada Bower"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd 
import numpy as np
from lets_plot import *
# add the additional libraries you need to import for ML here

LetsPlot.setup_html(isolated_frame=True)
```


## Elevator pitch
_A SHORT (2-3 SENTENCES) PARAGRAPH THAT `DESCRIBES KEY INSIGHTS` TAKEN FROM METRICS IN THE PROJECT RESULTS THINK TOP OR MOST IMPORTANT RESULTS._ (Note: this is not a summary of the project, but a summary of the results.)

_A Client has requested this analysis and this is your one shot of what you would say to your boss in a 2 min elevator ride before he takes your report and hands it to the client._

## QUESTION|TASK 1

__Shorten the column names and clean them up for easier use with pandas.__ Provide a table or list that exemplifies how you fixed the names. 

I made the columns more uniform in style by putting them in lower_snake_case and shortening some of the verbiage of the questions, where before they had a lot of special characters that would make it hard to access. The way I did this was by first creating a dataframe with just the first two rows, as that was what was defined the column names. I melted this to make it long, not wide. That made it much easier to see what I was dealing with. Then I manipulated the names how I wanted to. Then I concatenated the two column values into a new column with the full column names, which I applied to the actual dataframe when I read it in. 

```{python}
df_cols = pd.read_csv("https://github.com/fivethirtyeight/data/raw/master/star-wars-survey/StarWars.csv", encoding_errors="ignore", nrows=1).melt()
df_cols = (df_cols.replace("Response", "")
                  .replace(np.nan, "")
                  .replace("^Unnamed.*", "", regex=True)
                  .replace(r"Star Wars: Episode (\w{1,3}) .*", r"episode_\1",regex=True))

df_cols['variable'] = df_cols['variable'].str.lower().str.replace(" ", "_").str.replace("(", "").str.replace(")", "")
df_cols['value'] = df_cols['value'].str.lower().str.replace(" ", "_").str.replace("-", "")

df_cols.iloc[0,0] = "respondent_id"
df_cols.iloc[1,0] = "seen_any_star_wars"
df_cols.iloc[2,0] = "star_wars_fan"
df_cols.iloc[3:9,0] = "seen_"
df_cols.iloc[9:15,0] = "rank_"
df_cols.iloc[15:29,0] = "fav_"
df_cols.iloc[29,0] = "who_shot_first"
df_cols.iloc[30,0] = "familiar_w_exp_universe"
df_cols.iloc[31,0] = "exp_universe_fan"
df_cols.iloc[32,0] = "trekkie"

df_cols['newnames'] = df_cols['variable'] + df_cols['value']
df_cols
```

```{python}
df = pd.read_csv("https://github.com/fivethirtyeight/data/raw/master/star-wars-survey/StarWars.csv", encoding_errors="ignore", skiprows=2, names=df_cols['newnames'])
print(df.columns)
```


## QUESTION|TASK 2

__Clean and format the data so that it can be used in a machine learning model.__ As you format the data, you should complete each item listed below. In your final report provide example(s) of the reformatted data with a short description of the changes made.  
    a. Filter the dataset to respondents that have seen at least one film  
    a. Create a new column that converts the age ranges to a single number. Drop the age range categorical column  
    a. Create a new column that converts the education groupings to a single number. Drop the school categorical column  
    a. Create a new column that converts the income ranges to a single number. Drop the income range categorical column  
    a. Create your target (also known as “y” or “label”) column based on the new income range column  
    a. One-hot encode all remaining categorical columns   

_type your results and analysis here_

```{python}
# Include and execute your code here


```

```{python}
# Include and execute your code here


```

```{python}
# Include and execute your code here


```

```{python}
# Include and execute your code here


```

```{python}
# Include and execute your code here


```

```{python}
# Include and execute your code here


```

## QUESTION|TASK 3

__Validate that the data provided on GitHub lines up with the article by recreating 2 of the visuals from the article.__  

_type your results and analysis here_

```{python}
# Include and execute your code here

```

```{python}
# Include and execute your code here

```

## QUESTION|TASK 4

__Build a machine learning model that predicts whether a person makes more than $50k. Describe your model and report the accuracy.__ 

_type your results and analysis here_

```{python}
# Include and execute your code here

```

---

## STRETCH QUESTION|TASK 1

__Build a machine learning model that predicts whether a person makes more than $50k. With accuracy of at least 65%. Describe your model and report the accuracy.__

_type your results and analysis here_

```{python}
# Include and execute your code here


```


## STRETCH QUESTION|TASK 2

__Validate the data provided on GitHub lines up with the article by recreating a 3rd visual from the article.__

_type your results and analysis here_

```{python}
# Include and execute your code here


```


## STRETCH QUESTION|TASK 3

__Create a new column that converts the location groupings to a single number. Drop the location categorical column.__  

_type your results and analysis here_

```{python}
# Include and execute your code here


```

---
